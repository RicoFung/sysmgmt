<?xml version="1.0" encoding="UTF-8"?>
<!--DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"    "http://www.springframework.org/dtd/spring-beans-2.0.dtd"-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:jaxws="http://cxf.apache.org/jaxws"
    xsi:schemaLocation="
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd "
    default-autowire="byName" >
    
	<!-- 启用spring注解支持
	<context:annotation-config />
	  -->
	  
	<!-- 使用 annotation 自动注册bean,并检查@Controller, @Service, @Repository注解已被注入，也可以分开注释，或者固定某个目录下 -->
	<!-- 特别说明：base-package内的action类路径必须放在名为'action'的包内 才能扫描到，
		  如：auth/action/LoginAction.java-->
	<context:component-scan base-package="admin.service" />
	<context:component-scan base-package="admin.dao" />
	
	<!-- properties -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:/config/application.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置DataSource数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->  
        <property name="initialSize" value="${jdbc.initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${jdbc.maxActive}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${jdbc.minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${jdbc.maxWait}"></property>
		<!-- 配置防御SQL注入攻击,使用缺省配置的WallFilter -->
		<!-- <property name="filters" value="wall"/> -->
        <property name="proxyFilters">
			<list>
				<ref bean="wall-filter"/>
			</list>
		</property>
	</bean>
	<!-- durid WallFilter配置 -->
	<bean id="wall-config" class="com.alibaba.druid.wall.WallConfig">
		<!-- 允许 同时执行多条sql -->
		<property name="multiStatementAllow" value="true" />
	</bean>
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<!-- 指定dbType -->
		<!-- <property name="dbType" value="mysql" /> -->
		<!-- 读取自定义wall-config -->
		<property name="config" ref="wall-config" />
		<!-- 允许 对被认为是攻击的SQL进行LOG.error输出 -->
		<property name="logViolation" value="true" />
		<!-- 禁止 对被认为是攻击的SQL抛出SQLExcepton -->
		<property name="throwException" value="false" />
	</bean>
	<!-- 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	 -->
	
	<!--创建sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:*/mapper/**/*.xml" />
		<property name="configLocation" value="classpath:/config/mybatis.xml"/>
		<!-- 
		<property name="mapperLocations">
			<list>
				<value>classpath:admin/mapper/**/*.xml</value>
				<value>classpath:client/mapper/**/*.xml</value>
			</list>
		</property> 
		 -->
	</bean>
	
	<!-- 配置事务管理器，注意这里的dataSource和SqlSessionFactoryBean的dataSource要一致，不然事务就没有作用了 -->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean> 
	
	<!-- 配置事务的传播特性 -->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="upd*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="get*">PROPAGATION_NEVER,readOnly</prop>
				<prop key="query*">PROPAGATION_NEVER,readOnly</prop>
				<prop key="*">PROPAGATION_NEVER,readOnly</prop>
			</props>
		</property>
	</bean>
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="proxyTargetClass" value="true"/>
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
</beans>
